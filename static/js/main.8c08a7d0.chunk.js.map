{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","search","employees","sortEmployeesByName","sortedEmployees","sort","a","b","name","first","setState","sortEmployeesByPhone","cell","sortEmployeesByEmail","email","sortEmployeesByAge","dob","age","handleInputChange","event","searchValue","currentTarget","value","console","log","searchEmpArray","filter","user","Object","values","join","toLowerCase","indexOf","Axios","get","then","res","data","results","this","className","type","onChange","placeholder","scope","onClick","map","employee","src","picture","thumbnail","alt","last","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c08a7d0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import API from \"../utils/API\";\nimport Axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n  };\n\n  componentDidMount() {\n    Axios.get(\"https://randomuser.me/api/?results=500\").then((res) =>\n      this.setState({\n        employees: res.data.results,\n        \n      })\n    );\n    this.sortEmployeesByName();\n    this.sortEmployeesByPhone();\n    this.sortEmployeesByEmail();\n    this.sortEmployeesByAge();\n  }\n\n  sortEmployeesByName = () => {\n    function compare(a, b) {\n      if (a.name.first > b.name.first) return 1;\n      if (b.name.first > a.name.first) return -1;\n      return 0;\n    }\n    const sortedEmployees = this.state.employees.sort(compare);\n\n    this.setState({ employees: sortedEmployees });\n  };\n\n  sortEmployeesByPhone  = () => {\n    function compare(a, b) {\n      if (a.cell > b.cell) return 1;\n      if (b.cell > a.cell) return -1;\n      return 0;\n    }\n    const sortedEmployees = this.state.employees.sort(compare);\n\n    this.setState({ employees: sortedEmployees });\n  };\n\n  sortEmployeesByEmail  = () => {\n    function compare(a, b) {\n      if (a.email > b.email) return 1;\n      if (b.email > a.email) return -1;\n      return 0;\n    }\n    const sortedEmployees = this.state.employees.sort(compare);\n\n    this.setState({ employees: sortedEmployees });\n  };\n\n  sortEmployeesByAge  = () => {\n    function compare(a, b) {\n      if (a.dob.age > b.dob.age) return 1;\n      if (b.dob.age > a.dob.age) return -1;\n      return 0;\n    }\n    const sortedEmployees = this.state.employees.sort(compare);\n\n    this.setState({ employees: sortedEmployees });\n  };\n\n  handleInputChange = (event) => {\n    const searchValue = event.currentTarget.value;\n    console.log(searchValue);\n    this.setState({search: event.currentTarget.value});\n    const searchEmpArray = this.state.employees.filter((user=>{\n      console.log(\"user\", Object.values(user));\n      let results = Object.values(user).join(\"\").toLowerCase();\n      return results.indexOf(searchValue.toLowerCase()) !== -1;\n    }));\n    \n    this.setState({ employees: searchEmpArray });\n  };\n\n  \n  render() {\n    return (\n      <div>\n        <div className=\"jumbotron jumbotron-fluid text-center bg-primary text-white\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <hr className=\"my-4\" />\n          <p>\n            Click on the heading to filter by the heading or use the search box\n            to narow your results.\n          </p>\n          <input\n            name=\"search\"\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.handleInputChange}\n            placeholder=\"search by name\"\n          ></input>\n        </div>\n        <table className=\"table table-striped\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">Employee</th>\n              <th scope=\"col\" onClick={this.sortEmployeesByName}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Name\n                </button>\n              </th>\n              <th scope=\"col\" onClick={this.sortEmployeesByPhone}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Phone\n                </button>\n              </th>\n              <th scope=\"col\" onClick={this.sortEmployeesByEmail}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Email\n                </button>\n              </th>\n              <th scope=\"col\" onClick={this.sortEmployeesByAge}>\n                <button type=\"button\" className=\"btn btn-outline-light\">\n                  Age\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.map((employee) => (\n              <tr>\n                <td>\n                  <img\n                    src={employee.picture.thumbnail}\n                    alt=\"employee headshot\"\n                  />\n                </td>\n                <td>\n                  {employee.name.first} {employee.name.last}\n                </td>\n                <td>{employee.cell}</td>\n                <td>{employee.email}</td>\n                <td>{employee.dob.age}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}